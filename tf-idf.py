import pandas as pd
import statistics
import matplotlib.pyplot as plt
import numpy as np
from matplotlib.pyplot import figure

def tf(total_terms,feature):
    return feature/total_terms

def idf(no_of_d,no_d_with_terms):
    return np.log(no_of_d/1+no_d_with_terms)

df=pd.read_csv('C:/Users/sze/FYP/features_asm.csv')
c_tf=[]
j_tf=[]
r_tf=[]
family=['adware','crypto_miner','spyware','file_infector','worm','downloader','ransomware','installer','dropper','packed','flooder']

for i in range(len(df)):
    document=df.iloc[i]
    call_tf=tf(document['No_of_Terms'],document['CALL'])
    jmp_tf=tf(document['No_of_Terms'],document['JMP'])
    ret_tf=tf(document['No_of_Terms'],document['RET'])
    c_tf.append(call_tf)
    j_tf.append(jmp_tf)
    r_tf.append(ret_tf)
df['JMP_TF']=j_tf
df['CALL_TF']=c_tf
df['RET_TF']=r_tf

n_of_files=[]
ctf=[]
jtf=[]
rtf=[]
n_of_d_with_j=[]
n_of_d_with_c=[]
n_of_d_with_r=[]

for i in range(len(family)):
    data=df.loc[df['Family']==family[i]]
    n_of_d_with_j.append(len(data.loc[data['JMP']>0]))
    n_of_d_with_c.append(len(data.loc[data['CALL']>0]))
    n_of_d_with_r.append(len(data.loc[data['RET']>0]))
    mean_jtf=statistics.mean(data['JMP_TF'])
    mean_ctf=statistics.mean(data['CALL_TF'])
    mean_rtf=statistics.mean(data['RET_TF'])
    n_of_files.append(len(data))
    ctf.append(mean_ctf)
    jtf.append(mean_jtf)
    rtf.append(mean_rtf)

#calculate idf
cidf=[]
jidf=[]
ridf=[]
for i in range(len(family)):
    data=df.loc[df['Family']==family[i]]
    cidf.append(idf(len(data),n_of_d_with_c[i]))
    jidf.append(idf(len(data),n_of_d_with_j[i]))
    ridf.append(idf(len(data),n_of_d_with_r[i]))
    df.loc[df['Family']==family[i],'CALL_IDF']=idf(len(data),n_of_d_with_c[i])
    df.loc[df['Family']==family[i],'JMP_IDF']=idf(len(data),n_of_d_with_j[i])
    df.loc[df['Family']==family[i],'RET_IDF']=idf(len(data),n_of_d_with_r[i])

df.to_csv('C:/Users/sze/FYP/features_asm.csv',index=False)

##plot ctf
fig,ax1=plt.subplots()
fig=fig.set_size_inches(8,8)
ax2=ax1.twinx()
ax1.bar(family,n_of_files)
ax1.set_ylabel('Number of Samples')
ax1.set_xlabel('Malware Families')
plt.setp(ax1.get_xticklabels(), rotation=30, horizontalalignment='right')
ax2.plot(family,ctf,color='orange',marker='x',label='CALL TF')
ax2.set_ylabel('CALL TF')
plt.legend()
plt.title('Term Frequency of CALL in each Malware Family')
plt.savefig('C:/Users/sze/FYP/tf/call_tf.png')

##plot jtf
fig,ax1=plt.subplots()
fig=fig.set_size_inches(8,8)
ax2=ax1.twinx()
ax1.bar(family,n_of_files)
ax1.set_ylabel('Number of Samples')
ax1.set_xlabel('Malware Families')
plt.setp(ax1.get_xticklabels(), rotation=30, horizontalalignment='right')
ax2.plot(family,jtf,color='orange',marker='x',label='JMP TF')
ax2.set_ylabel('JMP TF')
plt.legend()
plt.title('Term Frequency of JMP in each Malware Family')
plt.savefig('C:/Users/sze/FYP/tf/jmp_tf.png')


##plot rtf
fig,ax1=plt.subplots()
fig=fig.set_size_inches(8,8)
ax2=ax1.twinx()
ax1.bar(family,n_of_files)
ax1.set_ylabel('Number of Samples')
ax1.set_xlabel('Malware Families')
plt.setp(ax1.get_xticklabels(), rotation=30, horizontalalignment='right')
ax2.plot(family,rtf,color='orange',marker='x',label='RET TF')
ax2.set_ylabel('RET TF')
plt.legend()
plt.title('Term Frequency of RET in each Malware Family')
plt.savefig('C:/Users/sze/FYP/tf/ret_tf.png')

##plot idf(call)
fig,ax1=plt.subplots()
fig=fig.set_size_inches(8,8)
ax2=ax1.twinx()
ax1.bar(family,n_of_files)
ax1.set_ylabel('Number of Samples')
ax1.set_xlabel('Malware Families')
plt.setp(ax1.get_xticklabels(), rotation=30, horizontalalignment='right')
ax2.plot(family,cidf,color='orange',marker='x',label='CALL IDF')
ax2.set_ylabel('CALL IDF')
plt.legend()
plt.title('Inversed Document Frequency of CALL in each Malware Family')
plt.savefig('C:/Users/sze/FYP/idf/call_idf.png')

######plot idf(jmp)
fig,ax1=plt.subplots()
fig=fig.set_size_inches(8,8)
ax2=ax1.twinx()
ax1.bar(family,n_of_files)
ax1.set_ylabel('Number of Samples')
ax1.set_xlabel('Malware Families')
plt.setp(ax1.get_xticklabels(), rotation=30, horizontalalignment='right')
ax2.plot(family,jidf,color='orange',marker='x',label='JMP IDF')
ax2.set_ylabel('JMP IDF')
plt.legend()
plt.title('Inversed Document Frequency of JMP in each Malware Family')
plt.savefig('C:/Users/sze/FYP/idf/jmp_idf.png')

#####plot idf(ret)
fig,ax1=plt.subplots()
fig=fig.set_size_inches(8,8)
ax2=ax1.twinx()
ax1.bar(family,n_of_files)
ax1.set_ylabel('Number of Samples')
ax1.set_xlabel('Malware Families')
plt.setp(ax1.get_xticklabels(), rotation=30, horizontalalignment='right')
ax2.plot(family,ridf,color='orange',marker='x',label='RET IDF')
ax2.set_ylabel('RET IDF')
plt.legend()
plt.title('Inversed Document Frequency of RET in each Malware Family')
plt.savefig('C:/Users/sze/FYP/idf/ret_idf.png')

#####tfidf
call_tfidf=[]
jmp_tfidf=[]
ret_tfidf=[]
for i in range(len(family)):
    call_tfidf.append(ctf[i]*cidf[i])
    jmp_tfidf.append(jtf[i]*jidf[i])
    ret_tfidf.append(rtf[i]*ridf[i])


####plot tfidf
figure(figsize=(8,8))
plt.plot(family,call_tfidf,color='green',marker='v',label='TF-IDF(CALL)')
plt.plot(family,ret_tfidf,color='orange',marker='x',label='TF-IDF(RET)')
plt.plot(family,jmp_tfidf,color='blue',marker='.',label='TF-IDF(JMP)')
plt.ylabel('TF-IDF Score')
plt.xlabel('Malware Families')
plt.xticks(rotation=45)
plt.title("TF-IDF Score vs Malware Families")
plt.legend()
plt.savefig('C:/Users/sze/FYP/tfidf.png')


##boxplot (tf)
df=pd.read_csv('C:/Users/sze/FYP/features_asm.csv')

for i in range(len(family)):
    plt.clf()
    j='C:/Users/sze/FYP/Boxplot/'+family[i]+'_JMP_TF.png'
    c='C:/Users/sze/FYP/Boxplot/'+family[i]+'_CALL_TF.png'
    r='C:/Users/sze/FYP/Boxplot/'+family[i]+'_RET_TF.png'
    data=df.loc[df['Family']==family[i]]
    plt.boxplot(data['CALL_TF'])
    plt.savefig(c)
    plt.clf()
    plt.boxplot(data['RET_TF'])
    plt.savefig(r)
    plt.clf()
    plt.boxplot(data['JMP_TF'])
    plt.savefig(r)

# ###boxplot (idf)
# for i in range(len(family)):
#     plt.clf()
#     j='C:/Users/sze/FYP/Boxplot/'+family[i]+'_JMP_IDF.png'
#     c='C:/Users/sze/FYP/Boxplot/'+family[i]+'_CALL_IDF.png'
#     r='C:/Users/sze/FYP/Boxplot/'+family[i]+'_RET_IDF.png'
#     data=df.loc[df['Family']==family[i]]
#     plt.boxplot(data['CALL_IDF'])
#     plt.savefig(c)
#     plt.clf()
#     plt.boxplot(data['RET_IDF'])
#     plt.savefig(r)
#     plt.boxplot(data['JMP_IDF'])
#     plt.savefig(r)
 
