import pandas as pd
import statistics
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier as knn
import numpy as np
from sklearn import metrics
from sklearn import preprocessing
from sklearn.model_selection import cross_val_score,RepeatedKFold
from sklearn.decomposition import PCA 
import matplotlib.pyplot as plt



##process data
family=['adware','crypto_miner','spyware','file_infector','worm','downloader','ransomware','installer','dropper','packed','flooder']
df=pd.read_csv('C:/Users/sze/FYP/features_asm.csv')
df['forward_tfidf']=df['JMP_TFIDF'].values+df['CALL_TFIDF'].values+df['JCC_TFIDF'].values+df['JNE_TFIDF'].values+df['JNZ_TFIDF'].values
df['backward_tfidf']=df['RET_TFIDF'].values

df['forward_tf']=df['JMP_TF'].values+df['CALL_TF'].values+df['JCC_TF'].values+df['JNE_TF'].values+df['JNZ_TF'].values
df['backward_tf']=df['RET_TF'].values

df['forward_idf']=df['JMP_IDF'].values+df['CALL_IDF'].values+df['JCC_IDF'].values+df['JNE_IDF'].values+df['JNZ_IDF'].values
df['backward_idf']=df['RET_IDF'].values

#df[['Family','forward','backward']].to_csv('C:/Users/sze/FYP/data.csv',index=False)
x=df[['forward_tfidf','backward_tfidf','forward_tf','backward_tf','forward_idf','backward_idf']].to_numpy()
y=df['Family'].to_numpy()


###normalization
norm=preprocessing.MinMaxScaler()
x=norm.fit_transform(x)

##cross validation
rkf=RepeatedKFold(n_splits=5,n_repeats=3)

model=knn(n_neighbors=5)
score=cross_val_score(model,x,y,cv=rkf,scoring='accuracy')
#print(score)
#print(statistics.mean(score),statistics.stdev(score))

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)
model.fit(x_train,y_train)
y_pred=model.predict(x_test)
score=metrics.accuracy_score(y_test,y_pred)
# print(score)
# f1=metrics.precision_recall_fscore_support(y_test,y_pred,average=None)
# print(f1)
print(metrics.classification_report(y_test,y_pred))

